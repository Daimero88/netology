---
- name: Install Clickhouse
  hosts: clickhouse
  gather_facts: false

  handlers:
    - name: Start clickhouse service
      become: true
      ansible.builtin.service:
        name: clickhouse-server
        state: restarted

  tasks:
    - name: "Download and install Clickhouse"
      tags: clickhouse
      block:
        - name: "Clickhouse"
          block:
            - name: Clickhouse. Download distrib
              ansible.builtin.get_url:
                url: "https://packages.clickhouse.com/deb/pool/main/c/{{ item }}/{{ item }}_{{ clickhouse_version }}_all.deb"
                dest: "./{{ item }}_{{ clickhouse_version }}.deb"
                mode: "0644"
              with_items: "{{ clickhouse_packages }}"
          rescue:
            - name: Clickhouse. Get clickhouse-common-static
              ansible.builtin.get_url:
                url: "https://packages.clickhouse.com/deb/pool/main/c/clickhouse-common-static/clickhouse-common-static_{{ clickhouse_version }}_amd64.deb"
                dest: "./clickhouse-common-static_{{ clickhouse_version }}.deb"
                mode: "0644"

        - name: Clickhouse. Install packages
          become: true
          ansible.builtin.apt:
            deb: "{{ item }}"
            state: present
          loop:
            - "./clickhouse-common-static_{{ clickhouse_version }}.deb"
            - "./clickhouse-client_{{ clickhouse_version }}.deb"
            - "./clickhouse-server_{{ clickhouse_version }}.deb"
          notify: Start clickhouse service

        - name: Clickhouse. Modify config.xml
          become: true
          ansible.builtin.replace:
            backup: true
            path: "/etc/clickhouse-server/config.xml"
            regexp: '^    <!-- <listen_host>0.0.0.0</listen_host> -->$'
            replace: '    <listen_host>0.0.0.0</listen_host>'
          notify: Start clickhouse service

        - name: Clickhouse. Flush handlers
          ansible.builtin.meta: flush_handlers

        - name: Clickhouse. Waiting while clickhouse-server is available
          ansible.builtin.pause:
            seconds: 30
            echo: false

        - name: Clickhouse. Check if database exists
          ansible.builtin.command: "clickhouse-client --host clickhouse-02 --port 9000 -q 'exists {{ clickhouse_db }};'"
          register: db_exists
          ignore_errors: true
          changed_when: false

        - name: Clickhouse. Create database
          ansible.builtin.command: "clickhouse-client --host clickhouse-02 --port 9000 -q 'create database {{ clickhouse_db }};'"
          register: create_db
          failed_when: create_db.rc != 0 and create_db.rc != 82
          changed_when: create_db.rc == 0
          ignore_errors: true

        - name: Clickhouse. Check if table exists
          ansible.builtin.command: >
            clickhouse-client --host clickhouse-02 --port 9000 -q
            'exists {{ clickhouse_db }}.{{ clickhouse_table }};'
          register: table_exists
          ignore_errors: true
          changed_when: false

        - name: Clickhouse. Create table
          ansible.builtin.command: >
            clickhouse-client --host clickhouse-02 --port 9000 -q
            'create table {{ clickhouse_db }}.{{ clickhouse_table }} (message String) ENGINE = MergeTree() ORDER BY tuple();'
          register: create_tb
          failed_when: create_tb.rc != 0 and create_tb.rc != 57
          changed_when: create_tb.rc == 0
          ignore_errors: true

- name: Install Vector
  hosts: vector
  gather_facts: false

  handlers:
    - name: Start Vector service
      become: true
      ansible.builtin.systemd:
        daemon_reload: true
        enabled: false
        name: vector.service
        state: started

  tasks:
    - name: Download and install Vector
      tags: vector
      block:
        - name: Vector. Create work directory
          ansible.builtin.file:
            path: "{{ vector_workdir }}"
            state: directory
            mode: "0755"

        - name: Vector. Download archive
          ansible.builtin.get_url:
            url: "https://packages.timber.io/vector/{{ vector_version }}/vector-{{ vector_version }}-{{ vector_os_arh }}-unknown-linux-gnu.tar.gz"
            dest: "{{ vector_workdir }}/vector-{{ vector_version }}-{{ vector_os_arh }}-unknown-linux-gnu.tar.gz"
            mode: "0644"

        - name: Vector. Unzip archive
          ansible.builtin.unarchive:
            remote_src: true
            src: "{{ vector_workdir }}/vector-{{ vector_version }}-{{ vector_os_arh }}-unknown-linux-gnu.tar.gz"
            dest: "{{ vector_workdir }}"

        - name: Vector. Check if binary exists
          ansible.builtin.stat:
            path: "/usr/bin/vector"
          register: vector_binary

        - name: Vector. Install vector binary file
          become: true
          ansible.builtin.copy:
            remote_src: true
            src: "{{ vector_workdir }}/vector-{{ vector_os_arh }}-unknown-linux-gnu/bin/vector"
            dest: "/usr/bin/"
            mode: "0755"
            owner: root
            group: root
          when: not vector_binary.stat.exists
          changed_when: false

        - name: Vector. Check installation
          ansible.builtin.command: "vector --version"
          register: var_vector
          failed_when: var_vector.rc != 0
          changed_when: false

        - name: Vector. Create etc directory
          become: true
          ansible.builtin.file:
            path: "/etc/vector"
            state: directory
            mode: "0755"

        - name: Vector. Create config vector.yaml
          become: true
          ansible.builtin.template:
            src: "template/vector/vector.yaml.j2"
            dest: "/etc/vector/vector.yaml"
            mode: "0644"
            owner: root
            group: root

        - name: Vector. Create user
          become: true
          ansible.builtin.user:
            create_home: false
            name: "{{ vector_os_user }}"

        - name: Vector. Create data_dir
          become: true
          ansible.builtin.file:
            path: "{{ vector_data_dir }}"
            state: directory
            mode: "0755"
            owner: "{{ vector_os_user }}"
            group: "{{ vector_os_group }}"

        - name: Vector. Check if service file exists
          ansible.builtin.stat:
            path: "/lib/systemd/system/vector.service"
          register: vector_service

        - name: Vector. Create daemon
          become: true
          ansible.builtin.copy:
            remote_src: true
            src: "{{ vector_workdir }}/vector-{{ vector_os_arh }}-unknown-linux-gnu/etc/systemd/vector.service"
            dest: "/lib/systemd/system/"
            mode: "0644"
            owner: "{{ vector_os_user }}"
            group: "{{ vector_os_group }}"
          when: not vector_service.stat.exists
          changed_when: false
          notify: Start Vector service

        - name: Vector. Modify service file ExecStart
          become: true
          ansible.builtin.replace:
            backup: true
            path: "/lib/systemd/system/vector.service"
            regexp: "^ExecStartPre=/usr/bin/vector validate$"
            replace: "ExecStartPre=/usr/bin/vector validate --config-yaml /etc/vector/vector.yaml"
          notify: Start Vector service

        - name: Vector. Modify service file ExecStartPre
          become: true
          ansible.builtin.replace:
            backup: true
            path: "/lib/systemd/system/vector.service"
            regexp: "^ExecStart=/usr/bin/vector$"
            replace: "ExecStart=/usr/bin/vector --config-yaml /etc/vector/vector.yaml"
          notify: Start Vector service

- name: Install Lighthouse
  hosts: lighthouse
  gather_facts: false

  handlers:
    - name: Start Lighthouse service
      become: true
      ansible.builtin.systemd:
        daemon_reload: true
        enabled: false
        name: nginx.service
        state: started

  tasks:
    - name: Download and install Lighthouse & nginx
      tags: lighthouse
      block:
        - name: Lighthouse. Install nginx & git client
          become: true
          ansible.builtin.apt:
            name: "{{ lighthouse_packages }}"
            update_cache: true
            state: present

        - name: Lighthouse. Check if repository exists
          ansible.builtin.stat:
            path: "{{ lighthouse_data_dir }}"
          register: lighthouse_repo

        - name: Lighthouse. Clone source code by git client
          become: true
          ansible.builtin.git:
            repo: "{{ lighthouse_code_src }}"
            dest: "{{ lighthouse_data_dir }}"
            version: "{{ lighthouse_git_version }}"
            update: false
          when: not lighthouse_repo.stat.exists
          changed_when: false

        - name: Lighthouse. Nginx config
          become: true
          ansible.builtin.template:
            src: "template/nginx/lighthouse.conf.j2"
            dest: "/etc/nginx/conf.d/{{ lighthouse_nginx_conf }}"
            mode: "0644"
            owner: root
            group: root
          notify: Start Lighthouse service
